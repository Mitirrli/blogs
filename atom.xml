<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mitirrli]]></title>
  <link href="https://mitirrli.github.io/blogs/atom.xml" rel="self"/>
  <link href="https://mitirrli.github.io/blogs/"/>
  <updated>2021-04-13T07:53:00+08:00</updated>
  <id>https://mitirrli.github.io/blogs/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.coderforart.com/">CoderForArt</generator>

  
  <entry>
    <title type="html"><![CDATA[Mycli]]></title>
    <link href="https://mitirrli.github.io/blogs/16182714235900.html"/>
    <updated>2021-04-13T07:50:23+08:00</updated>
    <id>https://mitirrli.github.io/blogs/16182714235900.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>Mycli是一个MySQL命令行客户端工具，具有自动完成和语法突出显示功能。</p>
</blockquote>

<h2 id="toc_0">Quick Start</h2>

<h3 id="toc_1">macOS</h3>

<pre class="line-numbers"><code class="language-text">$ brew update &amp;&amp; brew install mycli
</code></pre>

<h3 id="toc_2">others</h3>

<pre class="line-numbers"><code class="language-text">$ pip install mycli
</code></pre>

<h2 id="toc_3">Usage</h2>

<pre class="line-numbers"><code class="language-text">$ mycli --help
Usage: mycli [OPTIONS] [DATABASE]

A MySQL terminal client with auto-completion and syntax highlighting.

Examples:
   - mycli my_database
   - mycli -u my_user -h my_host.com my_database
   - mycli mysql://my_user@my_host.com:3306/my_database

Options:
   -h, --host TEXT               Host address of the database.
   -P, --port INTEGER            Port number to use for connection. Honors
                                 $MYSQL_TCP_PORT.
   -u, --user TEXT               User name to connect to the database.
   -S, --socket TEXT             The socket file to use for connection.
   -p, --password TEXT           Password to connect to the database.
   --pass TEXT                   Password to connect to the database.
   --ssh-user TEXT               User name to connect to ssh server.
   --ssh-host TEXT               Host name to connect to ssh server.
   --ssh-port INTEGER            Port to connect to ssh server.
   --ssh-password TEXT           Password to connect to ssh server.
   --ssh-key-filename TEXT        Private key filename (identify file) for the
                                 ssh connection.
   --ssl-ca PATH                 CA file in PEM format.
   --ssl-capath TEXT             CA directory.
   --ssl-cert PATH               X509 cert in PEM format.
   --ssl-key PATH                X509 key in PEM format.
   --ssl-cipher TEXT             SSL cipher to use.
   --ssl-verify-server-cert      Verify server&#39;s &quot;Common Name&quot; in its cert
                                  against hostname used when connecting. This
                                  option is disabled by default.
   -V, --version                 Output mycli&#39;s version.
   -v, --verbose                 Verbose output.
   -D, --database TEXT           Database to use.
   -d, --dsn TEXT                Use DSN configured into the [alias_dsn]
                                  section of myclirc file.
   --list-dsn                    list of DSN configured into the [alias_dsn]
                                  section of myclirc file.
   -R, --prompt TEXT             Prompt format (Default: &quot;\t \u@\h:\d&gt; &quot;).
   -l, --logfile FILENAME         Log every query and its results to a file.
   --defaults-group-suffix TEXT   Read MySQL config groups with the specified
                                 suffix.
   --defaults-file PATH           Only read MySQL options from the given file.
   --myclirc PATH                Location of myclirc file.
   --auto-vertical-output        Automatically switch to vertical output mode
                                 if the result is wider than the terminal
                                 width.
   -t, --table                   Display batch output in table format.
   --csv                         Display batch output in CSV format.
   --warn / --no-warn            Warn before running a destructive query.
   --local-infile BOOLEAN         Enable/disable LOAD DATA LOCAL INFILE.
   --login-path TEXT             Read this path from the login file.
   -e, --execute TEXT            Execute command and quit.
   --help                        Show this message and exit.
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql的几种锁]]></title>
    <link href="https://mitirrli.github.io/blogs/16173762986851.html"/>
    <updated>2021-04-02T23:11:38+08:00</updated>
    <id>https://mitirrli.github.io/blogs/16173762986851.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">使用docker搞一个mysql实例</h2>

<pre class="line-numbers"><code class="language-shell">$ docker run --name mysql-test -e MYSQL_ROOT_PASSWORD=root -p 3307:3306 -d mysql:latest

$ docker exec -it mysql-test bash
</code></pre>

<h2 id="toc_1">准备工作</h2>

<h3 id="toc_2">进入数据库</h3>

<pre class="line-numbers"><code class="language-shell">$ mysql -u root -p
</code></pre>

<h3 id="toc_3">创建一个数据库</h3>

<pre class="line-numbers"><code class="language-sql">CREATE DATABASE lock_demo;
</code></pre>

<h3 id="toc_4">展示数据库</h3>

<pre class="line-numbers"><code class="language-sql">show databases;
</code></pre>

<h3 id="toc_5">选择数据库</h3>

<pre class="line-numbers"><code class="language-sql">use lock_demo;
</code></pre>

<h2 id="toc_6">行锁</h2>

<h3 id="toc_7">创建一个demo表</h3>

<pre class="line-numbers"><code class="language-sql">DROP TABLE lock_demo;
CREATE TABLE lock_demo (
    id INT(10) NOT NULL AUTO_INCREMENT,
    name VARCHAR(10) NOT NULL DEFAULT &#39;&#39;,
    age TINYINT(3) NOT NULL DEFAULT 0,
    address VARCHAR(25) NOT NULL DEFAULT &#39;&#39;,
    primary key(id)
) engine=innoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
</code></pre>

<h3 id="toc_8">查看表结构</h3>

<pre class="line-numbers"><code class="language-sql">show create table lock_demo;
</code></pre>

<h3 id="toc_9">插入一些数据</h3>

<pre class="line-numbers"><code class="language-sql">INSERT INTO lock_demo (name, age, address) VALUES (&#39;leo&#39;, 10, &#39;a address&#39;);
INSERT INTO lock_demo (name, age, address) VALUES (&#39;geo&#39;, 12, &#39;b address&#39;);
INSERT INTO lock_demo (name, age, address) VALUES (&#39;ace&#39;, 13, &#39;c address&#39;);
</code></pre>

<h3 id="toc_10">查看数据</h3>

<pre class="line-numbers"><code class="language-sql">SELECT * FROM lock_demo;
</code></pre>

<h3 id="toc_11">开启两个shell进行测试</h3>

<pre class="line-numbers"><code class="language-sql">shell 1:
STEP 1. set autocommit=0; //关闭自动提交
STEP 2. UPDATE lock_demo SET address = &#39;q address&#39; WHERE id = 1;
STEP 3. SELECT * FROM lock_demo; //这里值已经改变了
STEP 5. COMMIT;


shell 2:
STEP 4. SELECT * FROM lock_demo; //这里值并没有修改
STEP 6. SELECT * FROM lock_demo; //这里值已经修改
</code></pre>

<h2 id="toc_12">表锁</h2>

<blockquote>
<p>索引失效导致表锁</p>
</blockquote>

<h3 id="toc_13">开启两个shell进行测试</h3>

<pre class="line-numbers"><code class="language-sql">shell1:
STEP 1. UPDATE lock_demo SET age = 1 WHERE id = 1 OR id = 2;
STEP 2. SELECT * FROM lock_demo; //这里值已经改变了
STEP 5. SELECT * FROM lock_demo; //这里值并没有改变
STEP 6. COMMIT; //提交后两者均变化了

shell2:
STEP 3. SELECT * FROM lock_demo; //这里值没有修改
STEP 4. UPDATE lock_demo SET age = 0 WHERE id = 3;
</code></pre>

<h2 id="toc_14">间隙锁</h2>

<blockquote>
<p>间隙锁将整个范围都锁住了</p>
</blockquote>

<h3 id="toc_15">插入一些数据</h3>

<pre class="line-numbers"><code class="language-sql">DELETE FROM lock_demo WHERE id &gt;= 1;

INSERT INTO lock_demo (name, age, address) VALUES (&#39;leo&#39;, 1, &#39;a address&#39;);
INSERT INTO lock_demo (name, age, address) VALUES (&#39;geo&#39;, 3, &#39;b address&#39;);
INSERT INTO lock_demo (name, age, address) VALUES (&#39;ace&#39;, 5, &#39;c address&#39;);
INSERT INTO lock_demo (name, age, address) VALUES (&#39;que&#39;, 7, &#39;d address&#39;);
</code></pre>

<h3 id="toc_16">开启两个shell进行测试</h3>

<pre class="line-numbers"><code class="language-sql">shell1:
STEP 1. UPDATE lock_demo SET name = &#39;c&#39; WHERE age &gt;= 1 and age &lt;= 7;

shell2:
STEP 2. INSERT INTO lock_demo (name, age, address) VALUES (&#39;d&#39;, 2, &#39;q address&#39;);
</code></pre>

<h2 id="toc_17">查看当前innodb锁的状态</h2>

<pre class="line-numbers"><code class="language-sql">show status like &#39;innodb_row_lock%&#39;;

Innodb_row_lock_current_waits 当前锁等待数
Innodb_row_lock_time 总共锁的时间
Innodb_row_lock_time_avg 平均锁的时间
Innodb_row_lock_time_max 最大锁的时间
Innodb_row_lock_waits 锁的次数
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP-FPM 是啥]]></title>
    <link href="https://mitirrli.github.io/blogs/16170664988742.html"/>
    <updated>2021-03-30T09:08:18+08:00</updated>
    <id>https://mitirrli.github.io/blogs/16170664988742.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">PHP FPM 和 NGINX</h2>

<blockquote>
<p>nginx 本身不能处理 php,当收到请求后,如果是 php 请求,在本文中,他将请求发送给 fastcgi 管理进程处理,fastcgi 管理进程会选择子进程处理完返回结果给 nginx</p>
</blockquote>

<h3 id="toc_1">CGI 和 FastCGI</h3>

<pre class="line-numbers"><code class="language-text">1. CGI(common gateway interface 公共网关接口)
对于动态的请求，需要用到cgi协议，将请求数据转换成php能理解的信息，然后php根据这些信息返回的信息也要通过cgi协议转换成nginx可以理解的信息，最后nginx接到这些信息再返回给浏览器

2. FastCGI
传统的cgi协议在每次连接请求时，会开启一个进程进行处理，处理完毕会关闭该进程，周而复始。因此有多少个连接就有多少个cgi进程，过多的进程会消耗资源和内存
</code></pre>

<h3 id="toc_2">php-cgi</h3>

<blockquote>
<p>php-cgi 是 php 提供给 web serve 的 cgi 协议接口程序</p>
</blockquote>

<pre class="line-numbers"><code class="language-text">当每次接到http前端服务器的请求都会开启一个php-cgi进程进行处理

而且开启的php-cgi的过程中会先要重载配置，数据结构以及初始化运行环境，如果更新了php配置，那么就需要重启php-cgi才能生效

直接杀死php-cgi进程,php就不能运行了(PHP-FPM没有这个问题,守护进程会平滑从新生成新的子进程）
</code></pre>

<h3 id="toc_3">php-fpm</h3>

<blockquote>
<p>php-fpm 是 php 提供给 web serve 的 fastcgi 协议接口程序</p>
</blockquote>

<pre class="line-numbers"><code class="language-text">PHP-FPM 允许一个进程对多个连接进行处理，而不会立即关闭这个进程，而是会接着处理下一个连接,它可以说是php-cgi的一个管理程序，是对php-cgi的改进

php-fpm会开启多个php-cgi程序，并且php-fpm常驻内存

每次web serve服务器发送连接过来的时候，php-fpm将连接信息分配给下面其中的一个子程序php-cgi进行处理，处理完毕这个php-cgi并不会关闭，而是继续等待下一个连接，这也是fast-cgi加速的原理

但是由于php-fpm是多进程的，而一个php-cgi基本消耗7-25M内存，因此如果连接过多就会导致内存消耗过大

php-fpm将新的连接发送给新的子程序php-cgi，这个时候加载的是新的配置，而原先正在运行的php-cgi还是使用的原先的配置，等到这个连接后下一次连接的时候会使用新的配置初始化，这就是平滑过渡
</code></pre>

<h3 id="toc_4">FastCGI 的工作流程</h3>

<pre class="line-numbers"><code class="language-text">Web Server启动时载入FastCGI进程管理器
FastCGI进程管理器自身初始化，启动多个CGI解释器进程(可见多个php-cgi)并等待来自Web Server的连接
当客户端请求到达Web Server时，FastCGI进程管理器选择并连接到一个CGI解释器。 Web server将CGI环境变量和标准输入发送到FastCGI子进程php-cgi
FastCGI 子进程完成处理后将标准输出和错误信息从同一连接返回Web Server。当FastCGI子进程关闭连接时，请求便告处理完成。FastCGI子进程接着等待并处理来自FastCGI进程管理器(运行在Web Server中)的下一个连接。在CGI模式中，php-cgi在此便退出了
</code></pre>

<p><a href="https://juejin.im/post/6844903725102792718">参考文章</a></p>

<h3 id="toc_5">编译安装 php 搭建一个 ubuntu 的 docker 环境</h3>

<pre class="line-numbers"><code class="language-shell">$ docker pull ubuntu:latest

$ docker run --name ubuntu --cap-add=SYS_PTRACE -p 6767:80 -d ubuntu /bin/bash -c &quot;while true; do echo 1; sleep 1; done&quot;

$ docker exec -it ubuntu bash //进入容器

$ cd /tmp

$ sed -i &#39;s/archive.ubuntu.com/mirrors.ustc.edu.cn/g&#39; /etc/apt/sources.list //使用国内镜像

$ apt-get update &amp;&amp; apt install -y wget curl vim gcc pkg-config systemctl make libxml2-dev libsqlite3-dev //下载之后需要的一些tool

$ wget -c https://downloads.php.net/~carusogabriel/php-8.0.0beta3.tar.gz //我这边直接安装当前最新版

$ tar zxvf php-8.0.0beta3.tar.gz

$ cd php-8.0.0beta3

$ ./configure --prefix=/tmp/php-8.0.0beta3/output --enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data //在配置的时候设置路径(安装的路径前缀),选择开启fpm,同时设置fpm的user和group

$ make //编译,这一步需要比较长的时间(之后sapi/cli目录里就已经有了php的可执行文件)

$ make install //安装(make install后可以执行$prefix/bin/php,此时在/tmp/php-8.0.0beta3/output/sbin目录下已经有了php-fpm的可执行文件)
</code></pre>

<h3 id="toc_6">重命名配置文件</h3>

<pre class="line-numbers"><code class="language-shell">$ mv /tmp/php-8.0.0beta3/output/etc/php-fpm.conf.default /tmp/php-8.0.0beta3/output/etc/php-fpm.conf &amp;&amp; mv /tmp/php-8.0.0beta3/output/etc/php-fpm.d/www.conf.default /tmp/php-8.0.0beta3/output/etc/php-fpm.d/www.conf
</code></pre>

<h3 id="toc_7">安装 nginx</h3>

<pre class="line-numbers"><code class="language-shell">$ apt install -y nginx
</code></pre>

<h3 id="toc_8">使用 unix 套接字通讯</h3>

<pre class="line-numbers"><code class="language-shell">$ mkdir -p /var/run/php-fpm

$ vim /tmp/php-8.0.0beta3/output/etc/php-fpm.d/www.conf
// 修改 listen = /var/run/php-fpm/php8-fpm.sock
// 打开注释 listen.owner = www-data
// 打开注释 listen.group = www-data
// 打开注释 listen.mode = 0660

$ vim /tmp/php-8.0.0beta3/output/etc/php-fpm.conf
// 打开注释 pid = run/php-fpm.pid
// 打开注释 error_log = log/php-fpm.log

$ /tmp/php-8.0.0beta3/output/sbin/php-fpm -R //启动php-fpm

$ ps -ef | grep php-fpm //这样已经可以看到对应的php-fpm进程了
</code></pre>

<h3 id="toc_9">创建一个 php 文件</h3>

<pre class="line-numbers"><code class="language-shell">$ vim /opt/index.php
</code></pre>

<pre class="line-numbers"><code class="language-php">&lt;?php

    echo phpinfo();
</code></pre>

<h3 id="toc_10">nginx 创建一个配置文件</h3>

<pre class="line-numbers"><code class="language-shell">$ vim /etc/nginx/conf.d/demo.conf //创建一个配置文件
</code></pre>

<pre class="line-numbers"><code class="language-nginx">server {
  listen 80;
  server_name 127.0.0.1;
  root /opt;

  location / {
    index  index.html index.htm index.php;
    if (!-e $request_filename)
    {
      rewrite ^/(.*)$ /index.php?s=$1 last;
      rewrite  index.php/(.*)$ /index.php?s=$1 last;
      break;
    }
  }

  location ~ \.php$ {
    fastcgi_pass unix:/var/run/php-fpm/php8-fpm.sock;
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include fastcgi_params;
  }
}
</code></pre>

<pre class="line-numbers"><code class="language-shell">$ systemctl stop nginx

$ nginx -c /etc/nginx/nginx.conf

$ nginx -s reload //reload会重新加载配置文件
</code></pre>

<pre class="line-numbers"><code class="language-shell">$ curl 127.0.0.1 //在容器中执行本命令可以看到成功结果,容器外访问http://127.0.0.1:6767/可以查看对应详情
</code></pre>

<h2 id="toc_11">PHP FPM配置</h2>

<h3 id="toc_12">慢日志</h3>

<pre class="line-numbers"><code class="language-shell">$ cd /tmp/php-8.0.0beta3/output &amp;&amp; mkdir log &amp;&amp; chown -R www-data:www-data log

# 慢日志目录在 /tmp/php-8.0.0beta3/output/log

$ vim /tmp/php-8.0.0beta3/output/etc/php-fpm.d/www.conf //打开慢日志开关

; The log file for slow requests
; Default Value: not set
; Note: slowlog is mandatory if request_slowlog_timeout is set
slowlog = log/$pool.log.slow

; The timeout for serving a single request after which a PHP backtrace will be
; dumped to the &#39;slowlog&#39; file. A value of &#39;0s&#39; means &#39;off&#39;.
; Available units: s(econds)(default), m(inutes), h(ours), or d(ays)
; Default Value: 0
request_slowlog_timeout = 1s
</code></pre>

<p><a href="https://caihongtengxu.github.io/2019/20190516/index.html">PHP-FPM可以创建慢日志文件，但是却不能给慢日志文件写入内容</a></p>

<h3 id="toc_13">配置php-fpm</h3>

<pre class="line-numbers"><code class="language-shell">$ ps -ef | grep php-fpm //可以看到目前有1个Fastcgi进程管理器和2个Fastcgi子进程
</code></pre>

<pre class="line-numbers"><code class="language-shell">$ vim /tmp/php-8.0.0beta3/output/etc/php-fpm.d/www.conf //修改配置文件
</code></pre>

<pre class="line-numbers"><code class="language-text">; The number of child processes created on startup.
; Note: Used only when pm is set to &#39;dynamic&#39;
; Default Value: (min_spare_servers + max_spare_servers) / 2
pm.start_servers = 4

; The desired maximum number of idle server processes.
; Note: Used only when pm is set to &#39;dynamic&#39;
; Note: Mandatory when pm is set to &#39;dynamic&#39;
pm.max_spare_servers = 4
</code></pre>

<pre class="line-numbers"><code class="language-shell">$ kill -USR2 `cat /tmp/php-8.0.0beta3/output/var/run/php-fpm.pid` //重启php-fpm

$ ps -ef | grep php-fpm //可以看到目前有1个Fastcgi进程管理器和4个Fastcgi子进程
</code></pre>

<h3 id="toc_14">php-fpm参数说明</h3>

<pre class="line-numbers"><code class="language-text">#php-fpm的运行权限。
#以什么用户什么组的权限来运行池fpm。
user = www
group = www

#php-fpm的运行方式，可以使端口，也可以使socke文件。
#如果是端口则是走tcp，如果是socket则直接读socket文件，这样性能相对更好。
listen = 127.0.0.1:9000 

#拥有socket权限的用户，需要和上面的user、group配置相结合。
#如果采用的端口的方式，则不配置。
listen.owner = www
listen.group = www
listen.mode = 0660

#这是php-fpm端口连接的地址。多个用&quot;,&quot;隔开。默认任意地址都可以连接。
#例如Nginx和php-fpm不在同一台服务器上，这里的值就是Nginx服务的ip地址。
#当Nginx和php-fpm配置在同一台服务器上，则直接写127.0.0.1即可。
listen.allowed_clients = 127.0.0.1 

#pid进程文件存放的位置，当我们启用一个php服务，
#则会自动创建一个该pid文件，其实我们可以直接把该文件理解理解php-fpm的进程号文件，
#两则是等价的。默认为none。
pid = /opt/remi/php72/root/var/run/php-fpm/php-fpm.pid 

#错误日志位置，默认：安装路径 #INSTALL_PREFIX#/log/php-fpm.log。
#如果设置为syslog，log就会发送给syslogd服务而不会写进文件里。
error_log = /opt/remi/php72/root/var/log/php-fpm/error.log 

#PHP限制的文件扩展名
security.limit_extensions = .php .php3 .php4 .php5 .php7

#系统日志标示，如果跑了多个fpm进程，需要用这个来区分日志是谁的。
syslog.ident = php-fpm 

#日记登记，可选：alert, error, warning, notice, debug。
log_level = notice 

#紧急重启阈值，需要与下面emergency_restart_interval参数一起配置。
emergency_restart_threshold = 60 

# 紧急重启阈值的时间范围。在此参数设置的时间内，
# 出现SIGSEGV或SIGBUS的子进程数超过emergency_restart_threshold参数设置的值。
# 那么fpm就会优雅的重启，值是0表示off这个功能，可用的单位有：s秒,m分,h时,d天。
emergency_restart_interval = 60s 

#设置子进程接受主进程复用信号的超时时间。
process_control_timeout = 0 

#当动态管理子进程时，fpm最多能fork多少个进程，0表示无限制，
# 这是所有进程池能启动子进程的总和，谨慎使用。
process.max = 128 

#设置子进程的优先级，在master进程以root用户启动时有效；
#如果没有设置，子进程会继承master进程的优先级，值范围-19(最高)到20(最低)，默认不设置。
process.priority = -19 

#设置成no用于调试bug，默认为yes。
daemonize = yes 

#master进程最多能打开的文件数量。默认采用系统设置的值。
rlimit_files = 1024 

#master进程核心rlimit限制值；可选unlimited或&gt;=0的整数，默认为系统的值。
rlimit_core = 0

#事件处理机制，默认自动检测，可选值：select，poll，
#epoll(linux&gt;=2.5.44)，kqueue，/dev/poll，port
events.mechanism = epoll 

#fpm想系统发送状态的频率。单位有s,m,h。
#前提是fpm被设置会系统服务。
systemd_interval = 10s 
</code></pre>

<p><a href="https://learnku.com/articles/44835#85187d">参考文章</a></p>

<h3 id="toc_15">php-fpm进程进程池配置</h3>

<blockquote>
<p>1个子进程基本上占用内存在30MB-40MB左右,需要根据自己的主机配置以及业务情况给出合适的方案</p>
</blockquote>

<pre class="line-numbers"><code class="language-text">#php-fpm的队列长度。
listen.backlog = 65535 

#php进程池权限，同样要master进程是root用户才有效，
#和上面的全局设置一样，不设置的话会继承master进程的优先级。
process.priority = -19 

#子进程管理方式
#static(静态配置，在启动php-fpm时根据该值创建固定的子进程数量)；
#dynamic(动态配置，在启动php-fpm时根据pm.start_servers的值初始化对应的子进程数，至少一个子进程)；
#ondemand(按需配置，在启动php-fpm时不创建子进程，而是根据请求动态fork子进程)；
pm = dynamic 

#最大子进程数量
pm.max_children = 5 

#初始化子进程数量，与上面的pm = dynamic配置使用。
pm.start_servers = 2 

#服务器闲置时最少保持2个子进程，不够这个数就会创建，只适用动态dynamic管理方式
pm.min_spare_servers = 2 

#服务器闲置时最多要有几个，多了会kill，只适用动态dynamic管理方式
pm.max_spare_servers = 3 

#子进程闲置时间，也就是说子进程没有可处理的任务时，在该之间使就会被killed。
pm.process_idle_timeout = 10s

#每个子进程最大的处理请求数量。在一定程度上可以防止内存泄漏。
pm.max_requests = 500 

#php-fpm状态监控的uri
pm.status_path string

#php-fpm监控页面的 ping 网址。
#如果没有设置，则无法访问 ping 页面。
#该页面用于外部检测php-fpm是否存活并且可以响应请求。请注意必须以斜线开头（/）。
ping.path string

#用于定义ping请求的返回响应。返回为 HTTP 200 的 text/plain 格式文本。默认值：pong。
ping.response string

#设置worker的nice(2)优先级（如果设置了的话）。
#该值从 -19（最高优先级） 到 20（更低优先级）。 
#默认值：不设置
process.priority int

#检测路径时使用的前缀
prefix string

#访问文件日志，没啥用处，比如yii2每次都记录访问index.php，只是记录真实的PHP文件。
access.log = var/log/$pool.access.log 

#php的慢日志
slowlog = var/log/$pool.log.slow 

#慢日志时间阈值
request_slowlog_timeout = 2s 

#单个请求的超时时间，当php.ini设置的最大执行时间未生效，则交由它来处理。
request_terminate_timeout = 3s 

#最大打开句柄数，默认为系统值。
rlimit_files = 1024 

#最多的核心使用数，默认为系统分配。
rlimit_core = 0 
</code></pre>

<p><a href="https://learnku.com/articles/44835#85187d">参考文章</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clean code]]></title>
    <link href="https://mitirrli.github.io/blogs/16171065720634.html"/>
    <updated>2021-03-30T20:16:12+08:00</updated>
    <id>https://mitirrli.github.io/blogs/16171065720634.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">php特性</h2>

<h3 id="toc_1">合并所有元素(使用数组解包)</h3>

<pre class="line-numbers"><code class="language-php">&lt;?php

    $a = 1;
    $b = [2, 3];

    var_dump(array_merge([$a], $b));//php7.4前
    var_dump([$a, ...$b]);//php7.4
</code></pre>

<h3 id="toc_2">null 合并运算符</h3>

<pre class="line-numbers"><code class="language-php">&lt;?php

    $default = &#39;a&#39;;
    $username = $default ?? &#39;username&#39;;

    var_dump($username);//php7.0
</code></pre>

<pre class="line-numbers"><code class="language-php">&lt;?php

    var_dump(isset($username) ? &#39;hi&#39; : &#39;username&#39;);//php7.0前
</code></pre>

<h3 id="toc_3">空合并运算符赋值</h3>

<pre class="line-numbers"><code class="language-php">&lt;?php

    $q = isset($q) ? 1 : 2;//php7.4前

    $a ??= 1;//php7.4

    var_dump($q);
    var_dump($a);
</code></pre>

<h3 id="toc_4">可为空(Nullable)类型</h3>

<pre class="line-numbers"><code class="language-text">php7.1后，参数以及返回值的类型现在可以通过在类型前加上一个问号使之允许为空
当启用这个特性时，传入的参数或者函数返回的结果要么是给定的类型，要么是 null
</code></pre>

<pre class="line-numbers"><code class="language-php">&lt;?php

    function test(?string $name)
    {
        var_dump($name);
    }

    test(&#39;test&#39;);   //&quot;test&quot;
    test(null);     //null
    test();         //Uncaught Error: Too few arguments ...
</code></pre>

<h3 id="toc_5">多异常捕获处理</h3>

<pre class="line-numbers"><code class="language-php">&lt;?php

    try {
        // some code
    } catch (Exception1 | Exception2 $e) {
    }
</code></pre>

<h3 id="toc_6">list 函数</h3>

<pre class="line-numbers"><code class="language-php">$arr = [&#39;apple&#39;, &#39;red&#39;];

list($fruit, $color) = $arr;

var_dump($fruit, $color);
</code></pre>

<pre class="line-numbers"><code class="language-php"># 列出他们的其中一个
$arr = [&#39;apple&#39;, &#39;red&#39;];

list(, $color) = $arr;

var_dump($color);
</code></pre>

<pre class="line-numbers"><code class="language-php"># php7.1后可以指定键名
$arr = [
    [&#39;id&#39; =&gt; 1, &#39;val&#39; =&gt; &#39;val1&#39;],
    [&#39;id&#39; =&gt; 2, &#39;val&#39; =&gt; &#39;val2&#39;],
];

list(&#39;id&#39; =&gt; $id, &#39;val&#39; =&gt; $val) = reset($arr);
var_dump($id, $val);
</code></pre>

<pre class="line-numbers"><code class="language-php">$arr = [
    [&#39;id&#39; =&gt; 1, &#39;val&#39; =&gt; &#39;val1&#39;],
    [&#39;id&#39; =&gt; 2, &#39;val&#39; =&gt; &#39;val2&#39;],
];

foreach ($arr as [&#39;id&#39; =&gt; $id, &#39;val&#39; =&gt; $val]) {
    var_dump($id, $val);
}
</code></pre>

<h3 id="toc_7">箭头函数</h3>

<pre class="line-numbers"><code class="language-php">&lt;?php
    //php7.4前
    $demo1 = array_map(function ($val){
        return $val * $val;
    }, [1,2]);

    //php7.4后
    $demo2 = array_map(fn($val) =&gt; $val * $val, [1,2]);
</code></pre>

<h3 id="toc_8">取出数组中的元素</h3>

<pre class="line-numbers"><code class="language-php">&lt;?php

    $arr = [
        [&#39;id&#39; =&gt; &#39;zx&#39;, &#39;name&#39; =&gt; &#39;ZX&#39;],
        [&#39;id&#39; =&gt; &#39;as&#39;, &#39;name&#39; =&gt; &#39;AS&#39;],
        [&#39;id&#39; =&gt; &#39;qw&#39;, &#39;name&#39; =&gt; &#39;QW&#39;],
    ];

    # 如何快速取出二维数组对于id的值
    var_dump(array_column($arr, &#39;id&#39;));
</code></pre>

<h3 id="toc_9">match</h3>

<pre class="line-numbers"><code class="language-php">&lt;?php
    //php8前
    switch ($input) {
        case &quot;true&quot;:
            $result = 1;
            break;
        case &quot;false&quot;:
            $result = 0;
            break;
        case &quot;null&quot;:
            $result = NULL;
        break;
    }

    //php8后
    $result = match($input) {
        &quot;true&quot; =&gt; 1,
        &quot;false&quot; =&gt; 0,
        &quot;null&quot; =&gt; NULL,
    };

    $result = match($input) {
        &quot;true&quot;, &quot;on&quot; =&gt; 1,
        &quot;false&quot;, &quot;off&quot; =&gt; 0,
        &quot;null&quot;, &quot;empty&quot;, &quot;NaN&quot; =&gt; NULL,
    };

    # match使用的是严格比较(===)，值和类型都要完全相等
    # 当input并不能被match中的所有条件满足的时候，match会抛出一个UnhandledMatchError exception
</code></pre>

<p><a href="https://www.laruence.com/">参考文章</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kibana制作用户访问热力地图]]></title>
    <link href="https://mitirrli.github.io/blogs/16180194244918.html"/>
    <updated>2021-04-10T09:50:24+08:00</updated>
    <id>https://mitirrli.github.io/blogs/16180194244918.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">ES 管道</h2>

<h3 id="toc_1">创建管道</h3>

<pre class="line-numbers"><code class="language-text">PUT _ingest/pipeline/geoip_pipeline
{
  &quot;description&quot; : &quot;geo_pipeline&quot;,
  &quot;processors&quot; : [
    {
      &quot;geoip&quot; : {
        &quot;field&quot; : &quot;ip&quot;
      }
    }
  ]
}
</code></pre>

<h2 id="toc_2">查看数据</h2>

<h3 id="toc_3">字段有增加</h3>

<pre class="line-numbers"><code class="language-text">增加了continent_name, country_iso_code, country_name, region_iso_code, region_name, city_name, location
</code></pre>

<h2 id="toc_4">kibana中开始绘图</h2>

<h3 id="toc_5">配置</h3>

<pre class="line-numbers"><code class="language-text">选择矢量形状 =&gt; 中国省份
设置词连接 =&gt; 左源 (ISO 3166-2代码)
右源 (选择索引) =&gt; geoip.region_iso_code.keyword
</code></pre>

<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/geoip-processor.html">ES手册1</a><br/>
<a href="https://www.elastic.co/guide/en/ecs/current/ecs-geo.html">ES手册2</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitlab版本升级]]></title>
    <link href="https://mitirrli.github.io/blogs/16169964390881.html"/>
    <updated>2021-03-29T13:40:39+08:00</updated>
    <id>https://mitirrli.github.io/blogs/16169964390881.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>公司目前gitlab版本是9.5.5,因升级服务器顺道把gitlab也升到最新,这里记录下历程</p>
</blockquote>

<h2 id="toc_0">备份Gitlab</h2>

<pre class="line-numbers"><code class="language-shell">gitlab-rake gitlab:backup:create
</code></pre>

<h3 id="toc_1">执行命令进行备份，将会生成一个命名格式为 &lt;timestamp&gt;_&lt;date&gt;_&lt;gitlab-version&gt;_gitlab_backup.tar 的压缩包</h3>

<h2 id="toc_2">Gitlab升级</h2>

<h5 id="toc_3">升级历程: 9.5.5 -&gt; 9.5.9 -&gt; 9.5.10 -&gt; 10.8.7 -&gt; 11.11.8 -&gt; 12.0.12 -&gt; 12.10.14 -&gt; 13.0.12 -&gt; 13.2.3</h5>

<p><a href="https://docs.gitlab.com/ee/policy/maintenance.html#upgrade-recommendations">按照官网升级顺序依次升级</a></p>

<h5 id="toc_4">下载deb包(*为版本号)</h5>

<pre class="line-numbers"><code class="language-shell">wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu/pool/xenial/main/g/gitlab-ce/gitlab-ce_*-ce.0_amd64.deb
</code></pre>

<h5 id="toc_5">安装deb包</h5>

<pre class="line-numbers"><code class="language-shell">dpkg -i *.deb
</code></pre>

<h5 id="toc_6">查看版本</h5>

<pre class="line-numbers"><code class="language-shell">cat /opt/gitlab/embedded/service/gitlab-rails/VERSION
</code></pre>

<h2 id="toc_7">Gitlab恢复</h2>

<p>首先关闭服务</p>

<pre class="line-numbers"><code class="language-shell">gitlab-rake gitlab:backup:restore BACKUP 1597233443_2020_03_12_9.3.1
</code></pre>

<h2 id="toc_8">Gitlab 502解决(查看pid)</h2>

<pre class="line-numbers"><code class="language-shell">gitlab-ctl status
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[本地调试组件]]></title>
    <link href="https://mitirrli.github.io/blogs/16172870405989.html"/>
    <updated>2021-04-01T22:24:00+08:00</updated>
    <id>https://mitirrli.github.io/blogs/16172870405989.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">目录结构</h3>

<h4 id="toc_1">在项目根目录创建一个packagist包，用来放置组件包，加入到.gitignore文件中。通过path的方式，让composer将test组件作为依赖加载到project中</h4>

<pre class="line-numbers"><code class="language-text">.
├── packagist
│   └── test
│       └── src
└── project
    ├── app
    ├── config
    ├── runtime
    └── vendor
</code></pre>

<h4 id="toc_2">创建新的组件</h4>

<pre class="line-numbers"><code class="language-shell">$ cd packagist

$ mkdir -p test/src &amp;&amp; cd test

$ composer init  //初始化git仓库,填写对应的信息后会生成对应的composer.json文件

$ composer i

$ vim composer.json
</code></pre>

<h4 id="toc_3">修改composer内容</h4>

<pre class="line-numbers"><code class="language-text">{
    &quot;name&quot;: &quot;qjdata/test&quot;,
    &quot;authors&quot;: [
        {
            &quot;name&quot;: &quot;Huanglei&quot;,
            &quot;email&quot;: &quot;huanglei@quanjingshuju.com&quot;
        }
    ],
    &quot;require&quot;: {},
    &quot;autoload&quot;: {
        &quot;psr-4&quot;: {
            &quot;Qwertyuiop\\&quot;: &quot;./src&quot;
        }
    }
}
</code></pre>

<h4 id="toc_4">增加测试类</h4>

<pre class="line-numbers"><code class="language-shell">$ cd src

$ vim Test.php
</code></pre>

<pre class="line-numbers"><code class="language-php">&lt;?php

namespace Qwertyuiop;

class Test
{
    public function test()
    {
        echo &#39;qwerty&#39;;
    }
}
</code></pre>

<h4 id="toc_5">在项目中使用未发布的组件包</h4>

<pre class="line-numbers"><code class="language-text">&quot;repositories&quot;: {
    &quot;qjdata/test&quot;: {
        &quot;type&quot;: &quot;path&quot;,
        &quot;url&quot;: &quot;./packagist/test&quot;
    }
}
</code></pre>

<pre class="line-numbers"><code class="language-shell">$ composer require qjdata/test dev-master   //现在就实现了在子项目更改代码,主项目代码也动态改变的目的

$ cd /var/www/html/yaoxiebang-php-skeleton/vendor/ &amp;&amp; ls -l qjdata    //test -&gt; ../../packagist/test
</code></pre>

<pre class="line-numbers"><code class="language-text">var_dump((new Test())-&gt;test());     //可以看到输出了&quot;qwerty&quot;
</code></pre>

<h2 id="toc_6">上传组件至私有gitlab</h2>

<h3 id="toc_7">在gitlab中创建一个项目，命名为test</h3>

<h3 id="toc_8">接下来我们把上篇packagist下的test目录传到gitlab中</h3>

<pre class="line-numbers"><code class="language-shell">$ cd /var/www/html/yaoxiebang-php-skeleton/packagist/test

$ git init

$ git remote add origin &lt;远程地址&gt;

$ git add . &amp;&amp; git commit -m &quot;Initial commit&quot; &amp;&amp; git push -u origin master
</code></pre>

<h3 id="toc_9">使用私有gitlab作为源(修改composer.json)</h3>

<h4 id="toc_10">使用ssh地址，需要将克隆仓库用户的id_rsa.pub文件添加到Gitlab</h4>

<pre class="line-numbers"><code class="language-text">&quot;repositories&quot;: {
    &quot;qjdata/test&quot;: {
        &quot;type&quot;: &quot;vcs&quot;,
        &quot;url&quot;: &quot;&lt;url&gt;&quot;
    }
}
</code></pre>

<pre class="line-numbers"><code class="language-shell">$ composer require qjdata/test dev-master
</code></pre>

<pre class="line-numbers"><code class="language-text">var_dump((new Test())-&gt;test());     //可以看到输出了&quot;qwerty&quot;
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[子模块]]></title>
    <link href="https://mitirrli.github.io/blogs/16173755899187.html"/>
    <updated>2021-04-02T22:59:49+08:00</updated>
    <id>https://mitirrli.github.io/blogs/16173755899187.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。 它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立</p>
</blockquote>

<h3 id="toc_0">添加子模块</h3>

<pre class="line-numbers"><code class="language-shell">你可以通过在 git submodule add 命令后面加上想要跟踪的项目的相对或绝对URL来添加新的子模块

$ git submodule add ... //默认情况下,子模块会将子项目放到一个与仓库同名的目录中,如果你想要放到其他地方,那么可以在命令结尾添加一个不同的路径
</code></pre>

<pre class="line-numbers"><code class="language-text">此时.gitmodules文件保存了项目 URL 与已经拉取的本地目录之间的映射。

修改子模块url: git config submodule.&lt;模块名&gt;.url &lt;私有URL&gt; 来覆盖这个选项的值
</code></pre>

<h3 id="toc_1">克隆含有子模块的项目</h3>

<pre class="line-numbers"><code class="language-shell">$ git clone &lt;url&gt;

$ git submodule init //初始化本地配置文件

$ git submodule update //从该项目中抓取所有数据并检出父项目中列出的合适的提交
</code></pre>

<pre class="line-numbers"><code class="language-shell">$ git clone --recurse-submodules &lt;url&gt; //传递--recurse-submodules选项,它就会自动初始化并更新仓库中的每一个子模块,包括可能存在的嵌套子模块

如果你已经克隆了项目但忘记了--recurse-submodule,那么可以运行git submodule update --init将git submodule init和git submodule update合并成一步
如果还要初始化、抓取并检出任何嵌套的子模块,请使用简明的git submodule update --init --recursive
</code></pre>

<h3 id="toc_2">在主项目更新子模块</h3>

<pre class="line-numbers"><code class="language-shell">$ git submodule update --remote &lt;模块名&gt;

$ git config -f .gitmodules submodule.&lt;模块名&gt;.branch &lt;分支名&gt; //设置模块默认的分支

如果不用 -f .gitmodules 选项,那么它只会为你做修改
</code></pre>

<h3 id="toc_3">更新包含子模块的项目</h3>

<pre class="line-numbers"><code class="language-shell">$ git submodule update --init --recursive //如果MainProject提交了你刚拉取的新子模块,应该在 git submodule update 后面添加--init选项,如果子模块有嵌套的子模块,则应使用--recursive选项

如果你想自动化此过程,那么可以为 git pull 命令添加--recurse-submodules选项
如果你想让Git总是以--recurse-submodules拉取,可以将配置选项submodule.recurse设置为true.此选项会让Git为所有支持--recurse-submodules的命令使用该选项(除clone以外)
</code></pre>

<h3 id="toc_4">子模块遍历</h3>

<pre class="line-numbers"><code class="language-shell">有一个foreach子模块命令,它能在每一个子模块中运行任意命令

$ git submodule foreach &#39;git stash&#39;
</code></pre>

<h3 id="toc_5">增加子模块别名</h3>

<pre class="line-numbers"><code class="language-shell">$ git config alias.sdiff &#39;!&#39;&quot;git diff &amp;&amp; git submodule foreach &#39;git diff&#39;&quot;
$ git config alias.spush &#39;push --recurse-submodules=on-demand&#39;
$ git config alias.supdate &#39;submodule update --remote --merge&#39;
</code></pre>

<h3 id="toc_6">删除子模块</h3>

<pre class="line-numbers"><code class="language-shell">$ git submodule deinit &lt;子模块&gt; //逆初始化模块
$ git rm --cached &lt;子模块&gt; //删除.gitmodules中记录的模块信息(--cached选项清除.git/modules中的缓存)
$ git commit -m &#39;comment&#39;
</code></pre>

<p><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97#_cloning_submodules">git官方文档</a></p>

]]></content>
  </entry>
  
</feed>
